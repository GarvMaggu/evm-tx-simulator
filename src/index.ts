import { BigNumberish } from "@ethersproject/bignumber";
import { JsonRpcProvider } from "@ethersproject/providers";

import { getHandlers } from "./handlers";
import { hex } from "./utils";

import type { CallTrace, GlobalState } from "./types";

const parseCallTrace = (state: GlobalState, trace: CallTrace) => {
  // TODO: Handle "DELEGATECALL"?
  if (trace.type === "CALL" && !trace.error) {
    const handlers = getHandlers(trace);
    for (const { handle } of handlers) {
      handle(state, trace);
    }

    for (const call of trace.calls ?? []) {
      parseCallTrace(state, call);
    }
  }
};

type TxData = {
  from: string;
  to: string;
  data: string;
  value: BigNumberish;
  gas?: BigNumberish;
  gasPrice?: BigNumberish;
  // TODO: Add support for more state overrides
  balanceOverrides?: {
    [address: string]: BigNumberish;
  };
};

export const simulateTx = async (
  tx: TxData,
  provider: JsonRpcProvider
): Promise<GlobalState> => {
  const trace: CallTrace = await provider.send("debug_traceCall", [
    {
      ...tx,
      value: hex(tx.value),
      gas: tx.gas !== undefined && hex(tx.gas),
      gasPrice: tx.gasPrice !== undefined && hex(tx.gasPrice),
      stateOverrides:
        tx.balanceOverrides !== undefined &&
        Object.fromEntries(
          Object.entries(tx.balanceOverrides).map(([address, balance]) => [
            address,
            { balance: hex(balance) },
          ])
        ),
    },
    "latest",
    {
      tracer: "callTracer",
    },
  ]);

  if (trace.error) {
    throw new Error("execution-reverted");
  }

  const state = {};
  parseCallTrace(state, trace);

  return state;
};

// For testing only
// const main = async () => {
//   const provider = new JsonRpcProvider(process.env.RPC_URL);
//   const result = await simulateTx(
//     {
//       from: "0x0000000000000000000000000000000000000001",
//       to: "0x9ebfb53fa8526906738856848a27cb11b0285c3f",
//       data: "0x06c575ce0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000500000000000000000000000057f1887a8bf19b14fc0df6fd9b2acc9af147ea855fc31cfa1df104bef487283e7c7c037b5011e0a9061c47e850ceb3463e9143550000000000000000000000000cccd55a5ac261ea29136831eeaa93bfe07f5db6000000000000000000000000830cb954df847c837e9d124f854d099dd116917a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a4e7acab240000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccd55a5ac261ea29136831eeaa93bfe07f5db600000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000830cb954df847c837e9d124f854d099dd116917a000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062e5f0a7000000000000000000000000000000000000000000000000000000006301dbc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c5b8d2bf08cd9d0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000057f1887a8bf19b14fc0df6fd9b2acc9af147ea855fc31cfa1df104bef487283e7c7c037b5011e0a9061c47e850ceb3463e914355000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000480c8d740b800000000000000000000000000000000000000000000000000000480c8d740b800000000000000000000000000830cb954df847c837e9d124f854d099dd116917a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d8efef4880000000000000000000000000000000000000000000000000000001d8efef488000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc9000000000000000000000000000000000000000000000000000000000000000414bfdb07848c3abdf4909ec82068f43ba25917a9142420362deaceefc3f06a9421415835f17a63e8bed806db996939bf55868247c7a39da1c6f118671eb9d0c131c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
//       value: "0x049e57d6354000",
//       gas: 1000000,
//       gasPrice: 0,
//       balanceOverrides: {
//         "0x0000000000000000000000000000000000000001": "0x049e57d6354000",
//       },
//     },
//     provider
//   );
//   console.log(result);
// };
// main();
